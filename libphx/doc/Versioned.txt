--- Versioned Objects in PHX ---------------------------------------------------

  Some objects in PHX have 'version numbers' that are used to keep cached
  information in-sync with the object in the event that changes are made to the
  object that would invalidate such information.

  Version numbers are uint64s, hence are extremely unlikely to overflow within
  a single program execution. If using version numbers to track changes to an
  object, you may safely assume that myVersion == *_GetVersion implies that no
  destructive modification has occurred since the last myVersion = *_GetVersion
  assignment.

  Consider the following example of a structure that must keep track of a
  mesh's vertex centroid, but uses a mesh that is exposed externally, hence
  may be modified by other code at unpredictable times. Since computing the
  centroid is relatively expensive, we can use versioning to cache the
  computation while ensuring that the centroid is always up-to-date:

     ...
     Mesh* mesh;
     uint64 meshVersion;
     Vec3f centroid;
     ...

     static void T_UpdateCentroid(T* self) {
       uint64 latest = Mesh_GetVersion(self->mesh);
       if (self->meshVersion == latest) return;
       ...
       /* Recompute centroid */
       ...
       self->meshVersion = latest;
     }

     void T_DoSomething(T* self, ...) {
       /* Ensure that centroid is up-to-date before using. */
       T_UpdateCentroid(self);
       ...
       /* Use self->centroid */
       ...
     }

--- Rules for Using Versioned Objects ------------------------------------------

    -> ALWAYS initialize your local version to 0; versioned objects start at
       version 1, so this will ensure that the local version is out-of-date
       upon creation and that an update to cached information will occur before
       the first usage.

    -> As per the above rule, it is generally unnecessary and wasteful to
       perform up-front computation. All version-related computations/caching
       should be deferred until the computed/cached information is required and
       the object version is checked, unless the performance implications of
       doing so are significantly detrimental.

    -> ALWAYS perform a version check before executing code that assumes local
       information to be in-sync with the object's state.

    -> Versioned objects are assumed to be non-thread-safe, hence, it is not
       necessary to perform a version check multiple times inside a single
       execution path that does not modify the object (but BE SURE that
       function calls made within said path are not allowed to modify the
       object!)

    -> DO NOT serialize or otherwise make use of versions beyond the scope of
       a single PHX engine execution. Versions are relative to execution and
       are NOT intended to work beyond said scope.

    -> DO NOT attempt to directly access the version of an object. Versioned
       objects are responsible for keeping their internal version up-to-date.
       Any object methods that modify state will update the internal version
       accordingly.

    -> In the rare case that you modify a versioned object's state outside of
       the object's methods, you MUST call *_IncVersion on the object to notify
       it of said change. This is necessary, for example, when operating
       directly on the vertex buffer of a Mesh. In general, it is necessary only
       when the object exposes internal state through pointers for the sake of
       efficiency.

--------------------------------------------------------------------------------
